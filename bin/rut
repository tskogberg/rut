#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'rut'
require 'snmp'

class App
  include Methadone::Main
  include Methadone::CLILogging

  attr_accessor :router_ip

  main do |router_ip| 
    @router_ip = router_ip

    SNMP::Manager.open(host: @router_ip, retries: 0,  mib_modules: ["DISMAN-EVENT-MIB", "SNMPv2-MIB"]) do |manager|
      run_and_handle_exceptions do
        response = manager.get_value(["sysUpTimeInstance" , "sysName.0"])
        days = response[0]
        router_name = response[1].capitalize
        puts "#{router_name} has been up #{days}"
      end
    end
  end

  # supplemental methods here

  def self.run_and_handle_exceptions
    begin
      yield
    rescue SNMP::RequestTimeout
      exception_output("Host #{@router_ip} not responding", 1)
    rescue SocketError
      exception_output("#{@router_ip} is an invalid ip address", 2)
    rescue Exception
      exception_output($!.inspect, 99)
    end
  end

  def self.exception_output(output, code)
    puts output
    exit(code)
  end

  # Declare command-line interface here

  description "Shows uptime on your router"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  arg :router_ip 
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Rut::VERSION

  use_log_level_option

  go!
end
